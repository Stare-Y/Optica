// <auto-generated />
using System;
using Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(OpticaDbContext))]
    partial class OpticaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Lote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_lote");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Costo")
                        .HasColumnType("double precision")
                        .HasColumnName("costo");

                    b.Property<int>("Existencias")
                        .HasColumnType("integer")
                        .HasColumnName("existencias");

                    b.Property<DateTime>("FechaCaducidad")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_caducidad");

                    b.Property<DateTime>("FechaEntrada")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_entrada");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Proveedor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("proveedor");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("referencia");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("lote", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LoteMica", b =>
                {
                    b.Property<int>("IdMicaGraduacion")
                        .HasColumnType("integer")
                        .HasColumnName("id_mica_graduacion");

                    b.Property<int>("IdLote")
                        .HasColumnType("integer")
                        .HasColumnName("id_lote");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.HasKey("IdMicaGraduacion", "IdLote");

                    b.HasIndex("IdLote");

                    b.ToTable("lote_mica", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Mica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_mica");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Fabricante")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("fabricante");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("material");

                    b.Property<string>("Proposito")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("proposito");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tipo");

                    b.Property<string>("Tratamiento")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tratamiento");

                    b.HasKey("Id");

                    b.ToTable("mica", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MicaGraduacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Graduacioncil")
                        .HasColumnType("real")
                        .HasColumnName("graduacioncil");

                    b.Property<float>("Graduacionesf")
                        .HasColumnType("real")
                        .HasColumnName("graduacionesf");

                    b.Property<int>("IdMica")
                        .HasColumnType("integer")
                        .HasColumnName("id_mica");

                    b.HasKey("Id");

                    b.HasIndex("IdMica");

                    b.HasIndex("Graduacionesf", "Graduacioncil", "IdMica")
                        .IsUnique();

                    b.ToTable("mica_graduacion", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_pedido");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Extra")
                        .HasColumnType("text")
                        .HasColumnName("extra");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fecha_salida");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("razon_social");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("pedido", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.PedidoMica", b =>
                {
                    b.Property<int>("IdMicaGraduacion")
                        .HasColumnType("integer")
                        .HasColumnName("id_mica_graduacion");

                    b.Property<int>("IdPedido")
                        .HasColumnType("integer")
                        .HasColumnName("id_pedido");

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer")
                        .HasColumnName("cantidad");

                    b.Property<int>("IdLoteOrigen")
                        .HasColumnType("integer")
                        .HasColumnName("id_lote_origen");

                    b.Property<double>("Precio")
                        .HasColumnType("double precision")
                        .HasColumnName("precio");

                    b.HasKey("IdMicaGraduacion", "IdPedido");

                    b.HasIndex("IdLoteOrigen");

                    b.HasIndex("IdPedido");

                    b.ToTable("pedido_mica", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id_usuario");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreDeUsuario")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("nombre_usuario");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("password");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rol");

                    b.HasKey("Id");

                    b.HasIndex("NombreDeUsuario")
                        .IsUnique();

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Lote", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.LoteMica", b =>
                {
                    b.HasOne("Domain.Entities.Lote", null)
                        .WithMany()
                        .HasForeignKey("IdLote")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MicaGraduacion", null)
                        .WithMany()
                        .HasForeignKey("IdMicaGraduacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.MicaGraduacion", b =>
                {
                    b.HasOne("Domain.Entities.Mica", null)
                        .WithMany()
                        .HasForeignKey("IdMica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Pedido", b =>
                {
                    b.HasOne("Domain.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.PedidoMica", b =>
                {
                    b.HasOne("Domain.Entities.Lote", null)
                        .WithMany()
                        .HasForeignKey("IdLoteOrigen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MicaGraduacion", null)
                        .WithMany()
                        .HasForeignKey("IdMicaGraduacion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pedido", null)
                        .WithMany()
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
